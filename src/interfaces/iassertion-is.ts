import validator from "validator";
import { iAssertion } from "./iassertion";

export interface iAssertionIs {
  not: iAssertionIs;
  optional: iAssertionIs;
  email(): iAssertion;
  alpha(): iAssertion;
  alphaNumeric(): iAssertion;
  ascii(): iAssertion;
  creditCard(): iAssertion;
  currency(): iAssertion;
  decimal(): iAssertion;
  float(): iAssertion;
  ip(): iAssertion;
  integer(): iAssertion;
  json(): iAssertion;
  jwt(): iAssertion;
  numeric(): iAssertion;
  postalCode(locale?: validator.PostalCodeLocale): iAssertion;
  url(): iAssertion;
  mobilePhone(locale?: validator.MobilePhoneLocale): iAssertion;
  boolean(): iAssertion;
  base32(): iAssertion;
  base64(): iAssertion;
  beforeDate(date?: string): iAssertion;
  afterDate(date?: string): iAssertion;
  sameOrAfterDate(date?: string): iAssertion;
  sameOrBeforeDate(date?: string): iAssertion;
  dataUri(): iAssertion;
  empty(): iAssertion;
  fqdn(): iAssertion;
  hash(): iAssertion;
  hexColor(): iAssertion;
  hexadecimal(): iAssertion;
  in(values: any[]): iAssertion;
  latLong(): iAssertion;
  lowercase(): iAssertion;
  md5(): iAssertion;
  mimeType(): iAssertion;
  octal(): iAssertion;
  port(): iAssertion;
  rgbColor(): iAssertion;
  slug(): iAssertion;
  uuid(): iAssertion;
  uppercase(): iAssertion;
  date(): iAssertion;
  null(): iAssertion;
  undefined(): iAssertion;
  string(): iAssertion;
  array(): iAssertion;
  object(): iAssertion;
  number(): iAssertion;
  regionCode(countries?: ("US" | "CA")[]): iAssertion;
  countryCode(format: "iso-alpha-2" | "iso-alpha-3"): iAssertion;
  timezone(): iAssertion;
}
